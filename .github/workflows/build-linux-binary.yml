name: build-linux-binary

on:
  push:
    tags:
      - '*'
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    env:
      binary_name: geopackage-optimizer
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23.8'

      - name: Set up version
        id: get_version
        shell: bash
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "version=dev" >> $GITHUB_OUTPUT
          fi

      - name: Sanitize ref name
        id: sanitize_ref
        shell: bash
        run: |
          ref="${GITHUB_REF_NAME:-${GITHUB_REF##*/}}"
          sanitized=$(echo "$ref" | tr '/\\' '__')
          echo "sanitized_ref=$sanitized" >> $GITHUB_OUTPUT

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ steps.sanitize_ref.outputs.sanitized_ref || github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libsqlite3-dev libspatialite-dev

      - name: Install cross-compiler for arm64
        if: matrix.arch == 'arm64'
        run: sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Set cross-compilation environment
        if: matrix.arch == 'arm64'
        run: |
          echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX=aarch64-linux-gnu-g++" >> $GITHUB_ENV

      - name: Build Linux binary
        run: |
          export CGO_ENABLED=1
          export GOOS=linux
          export GOARCH=${{ matrix.arch }}
          go build -o ${{ env.binary_name }}-${{ steps.get_version.outputs.version }}-linux-${{ matrix.arch }}

      - name: NOTE
        run: |
          # NOTE: On Linux, do NOT bundle mod_spatialite.so or other .so files. Users must install required libraries (libspatialite8, libgeos-c1, etc.) via package manager on the target system.
          # If you want to provide a fully self-contained binary, consider static linking or containerization.

      - name: Zip binary
        run: |
          zip ${{ env.binary_name }}-${{ steps.get_version.outputs.version }}-linux-${{ matrix.arch }}.zip \
            ${{ env.binary_name }}-${{ steps.get_version.outputs.version }}-linux-${{ matrix.arch }}

      - name: Upload release asset
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.binary_name }}-${{ steps.get_version.outputs.version }}-linux-${{ matrix.arch }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
